<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityWorker.Core</name>
    </assembly>
    <members>
        <member name="T:EntityWorker.Core.Attributes.ColumnType">
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            Assign a diffrent database type fot ht property
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Attributes.ColumnType.#ctor(System.String,System.Nullable{EntityWorker.Core.Helper.DataBaseTypes})">
            <summary>
            Assign a diffrent database type for the property
            Attibutes Stringify, DataEncode, JsonDocument, XmlDocument and ToBase64String will override this attribute. 
            </summary>
            <param name="dataType">The database type ex nvarchar(4000)</param>
            <param name="dataBaseTypes">null for all providers</param>
        </member>
        <member name="T:EntityWorker.Core.Attributes.DataEncode">
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            Choose to Encode the data in the database so none could read or decript it without knowing the key
            LinqToSql will also Encode the value when you select a Search
            <Example>
            .Where(x=> x.Password == "test") Will be equal to .Where(x=> x.Password == Encode("test"))
            so no need to worry when you search those column in the dataBase 
            you could Encode Adress, bankAccount information and so on with ease
            </Example>
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Attributes.DataEncode.#ctor(System.String,EntityWorker.Core.Helper.DataCipherKeySize)">
            <summary>
            Encode Key or leave it empty to use a EntityWorker.Core Defult Key
            </summary>
            <param name="key">Default =  GlobalConfiguration.DataEncode_Key</param>
            <param name="keySize"> NETCOREAPP2.0 can only handle 128.  128 || 256 Default = GlobalConfiguration.DataEncode_Key_Size  </param>
            <param name=""></param>
        </member>
        <member name="T:EntityWorker.Core.Attributes.DefaultOnEmpty">
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            Assign Default Value when Property is null
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Attributes.DefaultOnEmpty.#ctor(System.Object)">
            <summary>
            add Default Value when Property is null
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:EntityWorker.Core.Attributes.ExcludeFromAbstract">
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            This indicates that the prop or class will not be saved/created to the database.
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Attributes.ForeignKey">
            <inheritdoc />
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            Property is a ForeignKey in the database.
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Attributes.ForeignKey.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Attributes.ForeignKey.#ctor">
            <inheritdoc />
            <summary>
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Attributes.ForeignKey.#ctor(System.Type,System.String)">
            <inheritdoc />
            <summary>
            </summary>
            <param name="type"></param>
            <param name="propertyName">Map this key to propertyName</param>
        </member>
        <member name="T:EntityWorker.Core.Attributes.IndependentData">
            <inheritdoc />
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            This attr will tell LightDataTable abstract to not auto Delete this object when deleting parent, it will however try to create new or update  
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Attributes.JsonDocument">
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            Save the property as Json object in the database
            For the moment those values cant be searched by linq.
            you will have to use row sql to seach them
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Attributes.JsonIgnore">
            <summary>
            Ignore serialize to json
            EntityWorker will ignore serializing or derializing all properties that contain this attribute
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Attributes.KnownType">
            <summary>
            Use this when you have types that are unknown like interface which it can takes more than one type
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Attributes.NotNullable">
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            This attribute is most used on properties with type string
            in-case we don't want them to be null able
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Attributes.PrimaryKey">
            <inheritdoc />
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Attributes.PrimaryKey.#ctor(System.Boolean)">
            <summary>
             Primary Id Type can be string, Guid or numeric eg int or long
            </summary>
            <param name="autoGenerate"> AutoGenerate Primary_Id.
             When Property is NullOrEmpty or 0 it will autogenerate it anyway 
            </param>
        </member>
        <member name="T:EntityWorker.Core.Attributes.PropertyName">
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            Have diffrent Name for the property in the database
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Attributes.Rule">
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Attributes.Rule.RuleType">
            <summary>
            Rule type which implement interface IDbRuleTrigger
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Attributes.Rule.#ctor(System.Type)">
            <inheritdoc />
            <summary>
            Define class rule by adding this attribute
            ruleType must inherit from IDbRuleTrigger
            ex UserRule : IDbRuleTrigger<User/> which mean that this rule belonging to User
            </summary>
            <param name="ruleType"></param>
        </member>
        <member name="T:EntityWorker.Core.Attributes.Stringify">
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            Save the property as string in the database
            mostly used when we don't want an enum to be saved as integer in the database
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Attributes.Table">
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            Define diffrent name for the table
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Attributes.Table.#ctor(System.String,System.String)">
            <summary>
            schema works only for MSSQl and postGreSql
            Database should allow Create Schema for this to work or the Schema should already be created
            </summary>
            <param name="name"></param>
            <param name="schema"></param>
        </member>
        <member name="T:EntityWorker.Core.Attributes.ToBase64String">
            <inheritdoc />
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            Will be saved to the database as base64string 
            and converted back to its original string when its read
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Attributes.XmlDocument">
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Attributes.md
            Save the property as Xml object in the database
            For the moment those values cant be searched by linq.
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Attributes.XmlIgnore">
            <summary>
            Ignore serialize to xml
            EntityWorker will ignore serializing or derializing all properties that contain this attribute
            </summary>
        </member>
        <member name="M:EntityWorker.Core.DbSchema.Select``1(System.String)">
            <summary>
            Get all by object
            PrimaryKey attr must be set ins Where
            </summary>
            <typeparam name="T"></typeparam>
            <param name="repository"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.DbSchema.Select(System.Type,System.String)">
            <summary>
            Get all by object
            PrimaryKey attr must be set ins Where
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="repository"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.DbSchema.GetById(System.Object,System.Type)">
            <summary>
            Get object by ID
            Primary Key attribute must be set
            </summary>
            <param name="id"></param>
            <param name="repository"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.DbSchema.GetSqlAll(System.Type)">
            <summary>
            Get all by object
            PrimaryKey attr must be set
            </summary>
            <typeparam name="T"></typeparam>
            <param name="repository"></param>
            <param name="quary"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.DbSchema.GetByColumn(System.Object,System.String,System.Type)">
            <summary>
            Get all by object
            Get object by column, as foreignKey
            </summary>
            <typeparam name="T"></typeparam>
            <param name="column"></param>
            <param name="repository"></param>
            <param name="quary"></param>
            <param name="id"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:EntityWorker.Core.GlobalConfiguration">
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/GlobalConfiguration.md
            Set this in Application_Start
            </summary>
        </member>
        <member name="P:EntityWorker.Core.GlobalConfiguration.DataEncode_Key_Size">
            <summary>
            Default Value for DataEncode
            </summary>
        </member>
        <member name="P:EntityWorker.Core.GlobalConfiguration.DataEncode_Key">
            <summary>
            Default Value for DataEncode
            </summary>
        </member>
        <member name="P:EntityWorker.Core.GlobalConfiguration.PackageDataEncode_Key">
            <summary>
            The Default Value for package encryption
            </summary>
        </member>
        <member name="P:EntityWorker.Core.GlobalConfiguration.CultureInfo">
            <summary>
            EntityWorker will Use this CultureInfo to convert the data eg decimal, datetime and so on, from the database 
            Default is EN;
            </summary>
        </member>
        <member name="P:EntityWorker.Core.GlobalConfiguration.Log">
            <summary>
            Assign the Logger class.
            the class must inherit from ILogg
            </summary>
        </member>
        <member name="P:EntityWorker.Core.GlobalConfiguration.JSONParameters">
            <summary>
            Json globalConfig settings
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Helper.DynamicQueryable">
            <summary>
            Microsoft provided class. It allows dynamic string based querying. 
            Very handy when, at compile time, you don't know the type of queries that will be generated.
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Helper.DynamicQueryable.Aggregate(System.Linq.IQueryable,System.String,System.String)">
            <summary>
            Dynamically runs an aggregate function on the IQueryable.
            </summary>
            <param name="source">The IQueryable data source.</param>
            <param name="function">The name of the function to run. Can be Sum, Average, Min, Max.</param>
            <param name="member">The name of the property to aggregate over.</param>
            <returns>The value of the aggregate function run over the specified property.</returns>
        </member>
        <member name="T:EntityWorker.Core.Helper.DataBaseTypes">
            <summary>
            Mssql for "System.Data.SqlClient"
            Sqllight for "System.Data.SQLite"
            PostgreSql for "Npgsql"
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Helper.DataCipherKeySize">
            <summary>
            Default = GlobalConfiguration.DataEncode_Key_Size
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Helper.Extension">
            <summary>
            UseFull Extension, that work with EntityWorker.Core
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.ToJson(System.Object,EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Convert To Json
            </summary>
            <param name="o"></param>
            <param name="param">The Default is GlobalConfigration.JSONParameters</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.FromJsonToDynamic(System.String)">
            <summary>
            Convert Json to dynamic object
            </summary>
            <param name="json"></param>
            <param name=""></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.FromJson``1(System.String,EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            generic Json to object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="param">The Default is GlobalConfigration.JSONParameters</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.FromJson``1(System.String,EntityWorker.Core.InterFace.IRepository,EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            generic Json to object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="repository"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.FromJson(System.String,System.Type,EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Json to object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="type"></param>
            <param name="param">The Default is GlobalConfigration.JSONParameters</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.FromJson(System.String,EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Json to object
            json must containe the $type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="param">The Default is GlobalConfigration.JSONParameters</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.FromXml``1(System.String,EntityWorker.Core.InterFace.IRepository)">
            <summary>
            Xml to object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <param name="repository"> Assign repository to load XmlIgnored properties</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.FromXml(System.String,EntityWorker.Core.InterFace.IRepository)">
            <summary>
            Xml to object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <param name="repository"> Assign repository to load XmlIgnored properties</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.ToXml(System.Object)">
            <summary>
            Object to xml
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get PropertyName of the expression
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.ClearAllIdsHierarchy``1(``0,System.Boolean)">
            <summary>
            Clear all ids
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="includeIndependedData"> Clear all ids of object that contains IndependedData attributes</param>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.ClearAllIdsHierarchy``1(System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
            Clear all ids
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="includeIndependedData"> Clear all ids of object that contains IndependedData attributes</param>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.ClearAllIdsHierarchy(System.Object,System.Boolean)">
            <summary>
            Clear all PrimaryId and ForeignKey
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="includeIndependedData"> Clear all ids of object that contains IndependedData attributes</param>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.TrimEnd(System.String,System.String)">
            <summary>
            TrimEnd with string
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.InsertAfter(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Try and insert Last
            </summary>
            <param name="str">Source string</param>
            <param name="text"> string to insert</param>
            <param name="identifier">after last identified string </param>
            <param name="insertLastIfNotFound">insert after a specific string, count is from last, even if the identifier text not found</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.InsertBefore(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Try to insert 
            </summary>
            <param name="str">Source</param>
            <param name="text">string to insert</param>
            <param name="identifier"></param>
            <param name="insertLastIfNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.EntityKey(System.Object)">
            <summary>
            Generate an entityKey. Primary Id cant be null or empty
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.EntityKey(System.Type,System.Object)">
            <summary>
            Generate an entityKey Primary Id cant be null or empty
            </summary>
            <param name="type">entitytyp</param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.InsertBefore(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            Search and insert before identifier
            </summary>
            <param name="str"></param>
            <param name="text"></param>
            <param name="identifier"></param>
            <param name="insertLastIfNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.GetDbTypeByType(System.Type,EntityWorker.Core.Helper.DataBaseTypes)">
            <summary>
            Convert System Type to SqlType
            </summary>
            <param name="type"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.GetDbTypeByType(FastDeepCloner.IFastDeepClonerProperty,EntityWorker.Core.Helper.DataBaseTypes)">
            <summary>
            Convert System Type to SqlType
            </summary>
            <param name="prop"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.GetDbTypeListByType(FastDeepCloner.IFastDeepClonerProperty,EntityWorker.Core.Helper.DataBaseTypes)">
            <summary>
            Convert System Type to SqlType
            </summary>
            <param name="prop"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.Between(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            if date is between two dates
            </summary>
            <param name="input"></param>
            <param name="date1"></param>
            <param name="date2"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.GetPropertyName(FastDeepCloner.IFastDeepClonerProperty)">
            <summary>
            Get PropertyName from the cashed Properties
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.IsNumeric(System.Type)">
            <summary>
            Type is numeric eg long, decimal or float
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.GetPrimaryKey(System.Type)">
            <summary>
            Get the Primary key from type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.TableName``1">
            <summary>
            The value of attribute Table
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.TableName(System.Type)">
            <summary>
            The value of attribute Table
            </summary>
            <typeparam name="type"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.GetPrimaryKey(System.Object)">
            <summary>
            Get the Primary key from type
            </summary>
            <param name="item"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.GetPrimaryKeyValue(System.Object)">
            <summary>
            Get the Primary key Value
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.ObjectIsNew(System.Object)">
            <summary>
            Validate string and guid and long 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.SetPrimaryKeyValue(System.Object,System.Object)">
            <summary>
            Set the Primary key Value
            </summary>
            <param name="item"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:EntityWorker.Core.Helper.Extension.CachedActualType">
            <summary>
            Get IList Actual Type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.GetActualType(System.Type)">
            <summary>
            Get Internal type of IList
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.IsBase64String(System.String)">
            <summary>
            Check if string is base64
            this is only a simple validation by an regxp 
            @"^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.ToType``1(System.Object)">
            <summary>
            Convert From type to another type,
            make sure to have the same propertyNames in both or you could also map them by PropertyName Attributes
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.Extension.Clone``1(System.Collections.Generic.List{``0},FastDeepCloner.FieldType)">
            <summary>
            Clone Object, se FastDeepCloner fo more information
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="fieldType"></param>
            <returns></returns>
        </member>
        <member name="T:EntityWorker.Core.Helper.MethodHelper">
            <summary>
            UseFull Methods 
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Helper.MethodHelper.ConvertValue``1(System.Object)">
            <summary>
            Convert Value from Type to Type
            when fail a default value will be loaded.
            can handle all known types like datetime, time span, string, long etc
            ex
             "1115rd" to int? will return null
             "152" to int? 152
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            
        </member>
        <member name="M:EntityWorker.Core.Helper.MethodHelper.ConvertValue(System.Object,System.Type)">
            <summary>
            Convert Value from Type to Type
            when fail a default value will be loaded.
            can handle all known types like datetime, time span, string, long etc
            ex
             "1115rd" to int? will return null
             "152" to int? 152
            </summary>
            <param name="value"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.MethodHelper.EncodeStringToBase64(System.String)">
            <summary>
            Convert String ToBase64String
            </summary>
            <param name="stringToEncode"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Helper.MethodHelper.DecodeStringFromBase64(System.String)">
            <summary>
            Convert Base64String To String 
            </summary>
            <param name="stringToDecode"></param>
            <returns></returns>
        </member>
        <member name="T:EntityWorker.Core.Interface.IDbRuleTrigger`1">
            <summary>
            Interface for Entity Rules
            read https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/modules.md for more information
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EntityWorker.Core.Interface.IDbRuleTrigger`1.BeforeSave(EntityWorker.Core.InterFace.IRepository,`0)">
            <summary>
            Event triggered before saving an item
            No need to commit your changes here as there is already a transaction create and a commit operation will be triggered 
            </summary>
            <param name="repository"></param>
            <param name="itemDbEntity"></param>
        </member>
        <member name="M:EntityWorker.Core.Interface.IDbRuleTrigger`1.AfterSave(EntityWorker.Core.InterFace.IRepository,`0,System.Object)">
            <summary>
            triggered after saving an item
            No need to commit your changes here as there is already a transaction create and a commit operation will be triggered 
            </summary>
            <param name="repository"></param>
            <param name="itemDbEntity"></param>
            <param name="objectId"></param>
        </member>
        <member name="M:EntityWorker.Core.Interface.IDbRuleTrigger`1.Delete(EntityWorker.Core.InterFace.IRepository,`0)">
            <summary>
            trigger before deleting an item
            No need to commit your changes here as there is already a transaction create and a commit operation will be triggered 
            </summary>
            <param name="repository"></param>
            <param name="itemDbEntity"></param>
        </member>
        <member name="P:EntityWorker.Core.Interface.ILightDataTable.TablePrimaryKey">
            <summary>
            Table Primary Key Name 
            to use FindByPrimaryKey
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Interface.ILightDataTable.TotalPages">
            <summary>
            Total Pages
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Interface.ILightDataTable.Columns">
            <summary>
            Columns string
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Interface.ILightDataTable.ColumnsWithIndexKey">
            <summary>
            Column with int
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.AddColumn(System.String,System.String,System.Type,System.Object)">
            <summary>
            Add column to lightDataTable
            </summary>
            <param name="columnName"></param>
            <param name="displayName"></param>
            <param name="dataType"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.AddColumn(System.String,System.Type,System.Object)">
            <summary>
            Add column to lightDataTable
            </summary>
            <param name="columnName"></param>
            <param name="dataType"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.FindByPrimaryKey``1(System.Object)">
            <summary>
            Generic find by primary Key Value.
            T can be bool or LightDataTableRow
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primaryKeyValue"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.AddRow(System.Object[])">
            <summary>
            Add row
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.AddRow(EntityWorker.Core.LightDataTableRow)">
            <summary>
            Add Row
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.RemoveColumn``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Remove column by expression
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="P"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.MergeByPrimaryKey(EntityWorker.Core.LightDataTableRow)">
            <summary>
            merge two rows, will merge both column and values
            </summary>
            <param name="rowToBeMerged"></param>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.NewRow(System.Globalization.CultureInfo)">
            <summary>
            return new Row
            </summary>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.RemoveColumn(System.String)">
            <summary>
            Remove column by string
            </summary>
            <param name="columnName"></param>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.RemoveColumn(System.Int32)">
            <summary>
            remove column by its index
            </summary>
            <param name="columnIndex"></param>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.AssignValueToColumn(System.String,System.Object)">
            <summary>
            change value of the column
            </summary>
            <param name="columnName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.MergeColumns(EntityWorker.Core.LightDataTable)">
            <summary>
            merge Column, will add if not exist
            </summary>
            <param name="data2"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.Merge(EntityWorker.Core.LightDataTable,System.Boolean)">
            <summary>
            Merge LightDataTable 
            </summary>
            <param name="data2"></param>
            <param name="mergeColumnAndRow"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Reorder rows by expression
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="P"></typeparam>
            <param name="action"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.OrderBy(System.String,System.Boolean)">
            <summary>
            Reorder by string
            </summary>
            <param name="columnName"></param>
            <param name="position">desc or asc</param>
            <returns></returns>
        </member>
        <member name="P:EntityWorker.Core.Interface.ILightDataTable.Rows">
            <summary>
            Rows
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILightDataTable.SelectMany``1(System.Predicate{EntityWorker.Core.LightDataTableRow})">
            <summary>
            T could be bool For Any
            T could be LightDataTableRow for the first found Item
            T could be List of LightDataTableRow found items
            T could be LightDataTable a Table result 
            T could also be LightDataRowCollection of found items
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILog.Error(System.Exception)">
            <summary>
            Here we log errors
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:EntityWorker.Core.Interface.ILog.Info(System.String,System.Object)">
            <summary>
            Here we log data like executed sql information
            </summary>
            <param name="message"></param>
            <param name="infoData"></param>
        </member>
        <member name="T:EntityWorker.Core.Interface.IMigration">
            <summary>
            Inhert from this class and create a migration File
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EntityWorker.Core.Interface.IMigration.ExecuteMigration(EntityWorker.Core.InterFace.IRepository)">
            <summary>
            Do your db Changes here
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:EntityWorker.Core.Interface.IMigrationConfig">
            <summary>
            Interface for Migrationconfig
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Interface.IMigrationConfig.GetMigrations(EntityWorker.Core.InterFace.IRepository)">
            <summary>
            All available Migrations to be executed
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Interface.IModuleBuilder">
            <summary>
            Configrate you class here, add forgenKeys or Primary Keys so on.
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Interface.IModuleBuilder.DataBaseType">
            <summary>
            Provider type
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Interface.IModuleBuilder.Entity``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.IModuleBuilder.EntityType(System.Type)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:EntityWorker.Core.Interface.ISqlCommand.Command">
            <summary>
            DbCommand
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlCommand.AddInnerParameter(System.String,System.Object,System.Nullable{System.Data.DbType})">
            <summary>
            Add parameters to SqlCommand
            </summary>
            <param name="attrName"></param>
            <param name="value"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlCommand.DataReaderConverter``1">
            <summary>
            Convert SqlCommand to List of Type T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlCommand.DataReaderConverter(System.Type)">
            <summary>
            Convert SqlCommand to list of System.Type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlCommand.GetLightDataTable(System.String)">
            <summary>
            Get LightDataTable by SqlCommand
            </summary>
            <param name="primaryKey"> set the primary key for faster browsing the datatable </param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlCommand.ExecuteScalar">
            <summary>
            ExecuteScale with return value
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlCommand.ExecuteNonQuery">
            <summary>
            Execute Quary
            </summary>
            <returns></returns>
        </member>
        <member name="T:EntityWorker.Core.Interface.ISqlQueryable`1">
            <summary>
            quaryProvider for EntityWorker.Core
            https://github.com/AlenToma/EntityWorker.Core
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:EntityWorker.Core.Interface.ISqlQueryable`1.Executed">
            <summary>
            The Expression has already been executed, calling execute will only  return the current list and no db call will be done.
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Interface.ISqlQueryable`1.PartExecuted">
            <summary>
            The Expression has already been executed, but you could still load children.
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Interface.ISqlQueryable`1.ParsedLinqToSql">
            <summary>
            Result of LightDataTable LinqToSql
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.AddRange(System.Collections.Generic.List{`0})">
            <summary>
            Add Items
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.Add(`0)">
            <summary>
            Add Item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.IgnoreChildren(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Ignore loading some children eg ignore Person
            IgnoreChildren(x=> x.User.Person)
            </summary>
            <param name="ignoreActions"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.LoadChildren(System.Boolean)">
            <summary>
            LoadChildren, will load all children herarkie if onlyFirstLevel is not true
            </summary>
            <param name="onlyFirstLevel"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.LoadChildren(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            LoadChildren, will load all selected children herarkie eg
            LoadChildren(x=> x.User, x=> x.Adress.Select(a=> a.Country)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.Where(System.Linq.Expressions.Expression{System.Predicate{`0}})">
            <summary>
            Search 
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.Where(System.String)">
            <summary>
            expression of type string, the expression have to be the same type as T
            </summary>
            <Entityworker.linq>https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Dynamic.Linq.md</Entityworker.linq>
            <DynamicLing>https://github.com/kahanu/System.Linq.Dynamic</DynamicLing>
            <param name="expression"> eg "x.UserName.EndWith("test") And x.Name.Containe("test")"</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.Take(System.Int32)">
            <summary>
            Take only the selected rows 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.Skip(System.Int32)">
            <summary>
            Skip rows
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Order By Column
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.OrderBy(System.String)">
            <summary>
            Order By Column
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.OrderByDescending(System.String)">
            <summary>
            OrderByDescending Column
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            OrderByDescending Column
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.Execute">
            <summary>
            Execute the search Command
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.ExecuteAsync">
            <summary>
            Execute the search Command
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.ExecuteFirstOrDefault">
            <summary>
            Select the top 1
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.ExecuteCount">
            <summary>
            Return the count of the executed quary
            https://github.com/AlenToma/EntityWorker.Core
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.ExecuteAny">
            <summary>
            Return the Any of the executed quary
            https://github.com/AlenToma/EntityWorker.Core
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.Save(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Save All Changes. 
            You have to trigger SaveChanges() to commit
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Save.md
            </summary>
            <param name="ignoredProperties">ignore/execlude updateing some properties to the database. </param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.SaveAll(System.Func{`0,System.Boolean})">
            <summary>
            Save All Changes. 
            You have to trigger SaveChanges() to commit
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Save.md
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.Remove">
            <summary>
            Remove All objects herarkie. 
            You have to trigger SaveChanges() to commit
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Save.md
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.RemoveAll(System.Func{`0,System.Boolean})">
            <summary>
            Remove All objects herarkie. 
            You have to trigger SaveChanges() to commit
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Save.md
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.SaveChanges">
            <summary>
            Commit Changes
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Save.md
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.ToTable">
            <summary>
            Convert to LightDataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.ExecuteAndConvertToType``1">
            <summary>
            Convert Object of type a to b 
            all properties of B have to be mapped using attribute PropertyName or the propertName of A = B eg a."UserId" = b."UserId" 
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/EntityMappings.md
            </summary>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.Json(EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Convert To JSON
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Json.md
            </summary>
            <param name="param">The Default is GlobalConfigration.JSONParameters</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.JsonAsync(EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Convert To JSON
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Json.md
            </summary>
            <param name="param">The Default is GlobalConfigration.JSONParameters</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.Xml">
            <summary>
            Convert To XML
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Xml.md
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Interface.ISqlQueryable`1.XmlAsync">
            <summary>
            Convert To XML
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Xml.md
            </summary>
            <returns></returns>
        </member>
        <member name="T:EntityWorker.Core.InterFace.IRepository">
            <summary>
            EntityWorker.Core Repository
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Repository.md
            </summary>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.Clone``1(``0,FastDeepCloner.CloneLevel,FastDeepCloner.FieldType)">
            <summary>
            Clone Object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <param name="level"></param>
            <param name="fieldType"></param>
            <returns></returns>
        </member>
        <member name="P:EntityWorker.Core.InterFace.IRepository.DataBaseTypes">
            <summary>
            Database type
            </summary>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.GetLightDataTable(EntityWorker.Core.Interface.ISqlCommand,System.String)">
            <summary>
            Get LightDataTable by SqlCommand
            </summary>
            <param name="cmd"></param>
            <param name="primaryKey"> set the primary key for faster browsing the datatable </param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.GetSqlCommand(System.String)">
            <summary>
            Return SqlCommand that already contain SQLConnection
            </summary>
            <param name="sql"></param>
            <param name="type">Set for faster Converting of dbreader to object</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.GetStoredProcedure(System.String)">
            <summary>
            Return SqlCommand that already contain SQLConnection
            </summary>
            <param name="storedProcedure"></param>
            <param name="type">Set for faster Converting of dbreader to object</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.AddInnerParameter(EntityWorker.Core.Interface.ISqlCommand,System.String,System.Object,System.Nullable{System.Data.DbType})">
            <summary>
            Add parameters to SqlCommand
            </summary>
            <param name="cmd"></param>
            <param name="attrName"></param>
            <param name="value"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.ExecuteScalar(EntityWorker.Core.Interface.ISqlCommand)">
            <summary>
            ExecuteScale with return value
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.ExecuteNonQuery(EntityWorker.Core.Interface.ISqlCommand)">
            <summary>
            Execute Quary
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.CreateTransaction">
            <summary>
            Create Transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.Rollback">
            <summary>
            RoleBack trnsaction
            </summary>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.SaveChanges">
            <summary>
            Commit Changes
            </summary>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.Delete(System.Object)">
            <summary>
            Delete entity.
            SaveChanges is needed after
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.DeleteAsync(System.Object)">
            <summary>
            Delete entity.
            SaveChanges is needed after
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.Save``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Save Entity 
            ignore/execlude updateing some properties to the database. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="ignoredProperties"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.SaveAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Save Entity 
            ignore/execlude updateing some properties to the database. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="ignoredProperties"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.Get``1">
            <summary>
            Get Entity 
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.FromJson``1(System.String,EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Get ISqlQueryable from Json.
            All JsonIgnore Values will be loaded from the database if a primary key exist and the value is default()  eg null or empty or even 0 for int and decimal
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param">The Default is GlobalConfigration.JSONParameters</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.FromJsonAsync``1(System.String,EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Get ISqlQueryable from Json.
            All JsonIgnore Values will be loaded from the database if a primary key exist and the value is default()  eg null or empty or even 0 for int and decimal
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param">The Default is GlobalConfigration.JSONParameters</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.FromXml``1(System.String)">
            <summary>
            Get ISqlQueryable from Xml.
            All XmlIgnore Values will be loaded from the database if a primary key exist and the value is default()  eg null or empty or even 0 for int and decimal
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.FromXmlAsync``1(System.String)">
            <summary>
            Get ISqlQueryable from Xml.
            All XmlIgnore Values will be loaded from the database if a primary key exist and the value is default()  eg null or empty or even 0 for int and decimal
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.GetAll``1">
            <summary>
            Get all 
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.GetAllAsync``1">
            <summary>
            Get all 
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.LoadChildren``1(``0,System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            load children 
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TP"></typeparam>
            <param name="item"></param>
            <param name="onlyFirstLevel"></param>
            <param name="ignoreList"></param>
            <param name="actions"></param>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.LoadChildrenAsync``1(``0,System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            load children 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="onlyFirstLevel"></param>
            <param name="classes"></param>
            <param name="ignoreList"></param>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.LoadChildrenAsync``2(``0,System.Boolean,System.Collections.Generic.List{System.String},System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
            load children 
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TP"></typeparam>
            <param name="item"></param>
            <param name="onlyFirstLevel"></param>
            <param name="ignoreList"></param>
            <param name="actions"></param>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.LoadChildren``2(``0,System.Boolean,System.Collections.Generic.List{System.String},System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
            load children 
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TP"></typeparam>
            <param name="item"></param>
            <param name="onlyFirstLevel"></param>
            <param name="ignoreList"></param>
            <param name="actions"></param>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.Select``1(System.String)">
            <summary>
            Get IList by sql
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.SelectAsync``1(System.String)">
            <summary>
            Get IList by sql
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.GetObjectChanges(System.Object)">
            <summary>
            Get EntityChanges. entity has to be attachet 
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.GetObjectChanges(System.Object,System.Object)">
            <summary>
            Get object changes
            </summary>
            <param name="entityA"></param>
            <param name="entityB"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.IsAttached(System.Object)">
            <summary>
            If enetiy is attached
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.CreateTable``1(System.Boolean)">
            <summary>
            Create Table by System.Type
            all under tables will be created
            </summary>
            <typeparam name="T"></typeparam>
            <param name="force">force recreation if table eg if exist delete then create agen</param>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.CreateTable(System.Type,System.Boolean)">
            <summary>
            Create Table by System.Type
            all under tables will be created
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="force">force recreation if table eg if exist delete then create agen</param>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.RemoveTable``1">
            <summary>
            Remove Table
            all under tables will also be removed
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.RemoveTable(System.Type)">
            <summary>
            Remove Table
            all under tables will also be removed
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.DataReaderConverter``1(EntityWorker.Core.Interface.ISqlCommand)">
            <summary>
            Convert DbCommandExtended to List of Type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.DataReaderConverter(EntityWorker.Core.Interface.ISqlCommand,System.Type)">
            <summary>
            Convert DbCommandExtended to list of System.Type
            </summary>
            <param name="command"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.CreatePackage``1(``0)">
            <summary>
            Create Protected package that contain files or data for backup purpose or moving data from one location to another.
            Note that this package can only be readed by EntityWorker.Core
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Package.md
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.InterFace.IRepository.GetPackage``1(System.Byte[])">
            <summary>
            Read the package and get its content
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Package.md
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTable.OrderBy(System.String,System.Boolean)">
            <summary>
            ReOrders the _columns
            </summary>
            <param name="columnName"></param>
            <param name="position"></param>
        </member>
        <member name="M:EntityWorker.Core.LightDataTable.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Orderby expressions
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="P"></typeparam>
            <param name="action"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTable.ValidatePagerByPageNumber(System.Int32)">
            <summary>
            return true if pageNumber exist
            </summary>
            <param name="pageNumber"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTable.Merge(EntityWorker.Core.LightDataTable,System.Boolean)">
            <summary>
            Merge two dataTable togather. The Two tables dose not have to have the same number of columns!
            </summary>
            <param name="data2"></param>
            <param name="mergeColumnAndRow"></param>
        </member>
        <member name="M:EntityWorker.Core.LightDataTable.MergeColumns(EntityWorker.Core.LightDataTable)">
            <summary>
            Merge two dataTables _columns togather. The Two tables dose not have to have the same number of columns!
            </summary>
            <param name="data2"></param>
        </member>
        <member name="M:EntityWorker.Core.LightDataTable.AssignValueToColumn(System.String,System.Object)">
            <summary>
            Assign Value to column. 
            </summary>
            <param name="columnName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTable.RemoveColumn``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Remove Column By Expression eg this.RemoveColumn((Employee x)=> x.EmployeeID);
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTable.MergeByPrimaryKey(EntityWorker.Core.LightDataTableRow)">
            <summary>
             Merge two existing rows by its primaryKey
            </summary>
            <param name="rowToBeMerged"></param>
        </member>
        <member name="M:EntityWorker.Core.LightDataTable.FindByPrimaryKey``1(System.Object)">
            <summary>
            T can only be Bool or LightDataRow.
            bool for is found or lightDatarow for data
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primaryKeyValue"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTable.AddColumn(System.String,System.Type,System.Object)">
            <summary>
            Add Column to LightDataTable, its alot faster to add column before adding any rows.
            </summary>
            <param name="columnName"></param>
            <param name="dataType"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTable.AddColumn(System.String,System.String,System.Type,System.Object)">
            <summary>
            Add Column to LightDataTable, its alot faster to add column before adding any rows.
            </summary>
            <param name="columnName"></param>
            <param name="displayName"></param>
            <param name="dataType"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTable.AddRow(System.Object[])">
            <summary>
            Add new row to lightDataTable
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTable.AddRow(EntityWorker.Core.LightDataTableRow)">
            <summary>
            Add new Row to LightDataTable
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EntityWorker.Core.LightDataTable.SelectMany``1(System.Predicate{EntityWorker.Core.LightDataTableRow})" -->
        <member name="M:EntityWorker.Core.LightDataTable.#ctor(System.Object,System.Boolean,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Convert ObjectList To LightDataTable
            </summary>
            <param name="obj"></param>
            <param name="execludeClasses"></param>
            <param name="overdedDataType"></param>
            <param name="ignoreTypeValidation"></param>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.ContainKey``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Column ContainKey By Expression
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.SetTValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Set Value By Expressions
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.Value``1(System.Int32)">
            <summary>
            return already converted value by T eg row<string/>(0) its a lot faster when reading values, but the returned values is wont be a sheared one
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.Value``1(System.String)">
            <summary>
            return already converted value by T eg row<string/>(0) its a lot faster when reading values, but the returned values is wont be a sheared one
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.Value``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get Property By expression;
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.Value``1(EntityWorker.Core.LightDataTableColumn)">
            <summary>
            return already converted value by T eg row<string/>(0) its a lot faster when reading values, but the returned values is wont be a sheared one
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.ValueAndConvert``1(System.String,System.Boolean)">
            <summary>
            This will try to load the selected value and convert it to the selected type when it fails
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="loadDefault"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.ValueAndConvert(System.Type,System.String,System.Boolean)">
            <summary>
            This will try to load the selected value and convert it to the selected type when it fails
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="key"></param>
            <param name="loadDefault"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.ToDataRow(System.Data.DataTable)">
            <summary>
            Convert LightDataRow to DataRow
            </summary>
            <param name="parentTable"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.Merge(EntityWorker.Core.LightDataTableRow)">
            <summary>
            Merge two rows together.
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.MergeUnKnownObject(System.Object)">
            <summary>
            Merge a class to the selected LightDataRow
            </summary>
            <param name="objectToBeMerged"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.MergeToAnObject(System.Object)">
            <summary>
            Merge LightDataRow to an object
            </summary>
            <param name="selectedObject"></param>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.ToObject``1">
            <summary>
            Convert the current created row to an object
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.ToObject(System.Object)">
            <summary>
            Convert the current created row to an object
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.AddValue(EntityWorker.Core.LightDataTableColumn,System.Object,EntityWorker.Core.ColumnsCollections{System.String},EntityWorker.Core.ColumnsCollections{System.Int32})">
            <summary>
            This Method should only be called from the lightdatatable object
            </summary>
            <param name="col"></param>
            <param name="value"></param>
            <param name="cols"></param>
            <param name="colsIndex"></param>
        </member>
        <member name="M:EntityWorker.Core.LightDataTableRow.Remove(System.Int32,EntityWorker.Core.ColumnsCollections{System.String},EntityWorker.Core.ColumnsCollections{System.Int32})">
            <summary>
            This Method should only be called from the lightdatatable object
            </summary>
            <param name="columnIndex"></param>
            <param name="cols"></param>
            <param name="colsIndex"></param>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.CodeToDataBaseMerge.DataLoss">
            <summary>
            If sql statement containe drop operations, which will loose data
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.CodeToDataBaseMergeCollection.Execute(System.Boolean)">
            <summary>
            Execute changes
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.DataBase.Database.ConnectionString">
            <summary>
            DataBase FullConnectionString
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.DataBase.Database.CreateSchema(System.Type)">
            <summary>
            create schema if not exist
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.DataBase.Database.GetColumnSchema(System.Type)">
            <summary>
            Get the ColumnSchema  
            </summary>
            <param name="datatype"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.DataBase.Database.GetColumnSchema``1">
            <summary>
            Get the ColumnSchema  
            </summary>
            <typeparam name="T"> datatype ed Users</typeparam>
            <returns></returns>
        </member>
        <member name="T:EntityWorker.Core.Object.Library.DbCommandExtended">
            <summary>
            EntityWorker.Core SqlCommand
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Repository.md
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.DbCommandExtended.#ctor(System.Data.Common.DbCommand,EntityWorker.Core.InterFace.IRepository)">
            <summary>
            
            </summary>
            <param name="cmd"></param>
            <param name="provider"></param>
            <param name="tableType"></param>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.DbCommandExtended.Command">
            <summary>
            DbCommand
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.DbCommandExtended.AddInnerParameter(System.String,System.Object,System.Nullable{System.Data.DbType})">
            <summary>
            Add parameters to SqlCommand
            </summary>
            <param name="attrName"></param>
            <param name="value"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.DbCommandExtended.DataReaderConverter``1">
            <summary>
            Convert SqlCommand to List of Type T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.DbCommandExtended.DataReaderConverter(System.Type)">
            <summary>
            Convert SqlCommand to list of System.Type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.DbCommandExtended.GetLightDataTable(System.String)">
            <summary>
            Get LightDataTable by SqlCommand
            </summary>
            <param name="primaryKey"> set the primary key for faster browsing the datatable </param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.DbCommandExtended.ExecuteScalar">
            <summary>
            ExecuteScale with return value
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.DbCommandExtended.ExecuteNonQuery">
            <summary>
            Execute Quary
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.DbCommandExtended.ToString">
            <summary>
            get the sql command
            </summary>
            <returns></returns>
        </member>
        <member name="T:EntityWorker.Core.Object.Library.EntityChanges">
            <summary>
            DataChanges
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.EntityChanges.EntityType">
            <summary>
            Entity Type
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.EntityChanges.PropertyName">
            <summary>
            PropertyType
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.EntityChanges.NewValue">
            <summary>
            The new Value
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.EntityChanges.OldValue">
            <summary>
            Old Value
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Object.Library.EntityException">
            <summary>
            CustomException
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.UseOptimizedDatasetSchema">
            <summary>
            Use the optimized fast Dataset Schema format (default = True)
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.UseFastGuid">
            <summary>
            Use the fast GUID format (default = True)
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.SerializeNullValues">
            <summary>
            Serialize null values to the output (default = True)
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.UseUTCDateTime">
            <summary>
            Use the UTC date format (default = True)
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.UsingGlobalTypes">
            <summary>
            Use the $types extension to optimise the output json (default = True)
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.IgnoreCaseOnDeserialize">
            <summary>
            Ignore case when processing json and deserializing 
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.UseExtensions">
            <summary>
            Enable fastJSON extensions $types, $type, $map (default = True)
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.UseEscapedUnicode">
            <summary>
            Use escaped unicode i.e. \uXXXX format for non ASCII characters (default = True)
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.KVStyleStringDictionary">
            <summary>
            Output string key dictionaries as "k"/"v" format (default = False) 
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.UseValuesOfEnums">
            <summary>
            Output Enum values instead of names (default = False)
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.IgnoreAttributes">
            <summary>
            Ignore attributes to check for (default : XmlIgnoreAttribute, NonSerialized)
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.ParametricConstructorOverride">
            <summary>
            If you have parametric and no default constructor for you classes (default = False)
            IMPORTANT NOTE : If True then all initial values within the class will be ignored and will be not set
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.DateTimeMilliseconds">
            <summary>
            Serialize DateTime milliseconds i.e. yyyy-MM-dd HH:mm:ss.nnn (default = false)
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.SerializerMaxDepth">
            <summary>
            Maximum depth for circular references in inline mode (default = 20)
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.InlineCircularReferences">
            <summary>
            Inline circular or already seen objects instead of replacement with $i (default = false) 
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.FormatterIndentSpaces">
            <summary>
            Formatter indent spaces (default = 3)
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSONParameters.AllowNonQuotedKeys">
            <summary>
            TESTING - allow non quoted keys in the json like javascript (default = false)
            </summary>
        </member>
        <member name="F:EntityWorker.Core.Object.Library.JSON.JSON.Parameters">
            <summary>
            Globally set-able parameters for controlling the serializer
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.ToNiceJSON(System.Object)">
            <summary>
            Create a formatted json string (beautified) from an object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.ToNiceJSON(System.Object,EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Create a formatted json string (beautified) from an object
            </summary>
            <param name="obj"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.ToJSON(System.Object)">
            <summary>
            Create a json representation for an object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.ToJSON(System.Object,EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Create a json representation for an object with parameter override on this call
            </summary>
            <param name="obj"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.Parse(System.String)">
            <summary>
            Parse a json string and generate a Dictionary&lt;string,object&gt; or List&lt;object&gt; structure
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.ToDynamic(System.String)">
            <summary>
            Create a .net4 dynamic object from the json string
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.ToObject``1(System.String)">
            <summary>
            Create a typed generic object from the json
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.ToObject``1(System.String,EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Create a typed generic object from the json with parameter override on this call
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.ToObject(System.String)">
            <summary>
            Create an object from the json
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.ToObject(System.String,EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Create an object from the json with parameter override on this call
            </summary>
            <param name="json"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.ToObject(System.String,System.Type)">
            <summary>
            Create an object of type from the json
            </summary>
            <param name="json"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.ToObject(System.String,System.Type,EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Create an object of type from the json with parameter override on this call
            </summary>
            <param name="json"></param>
            <param name="type"></param>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.FillObject(System.Object,System.String)">
            <summary>
            Fill a given object with the json represenation
            </summary>
            <param name="input"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.DeepCopy(System.Object)">
            <summary>
            Deep copy an object i.e. clone to a new object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.DeepCopy``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.Beautify(System.String)">
            <summary>
            Create a human readable string from the json 
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.Beautify(System.String,System.Byte)">
            <summary>
            Create a human readable string from the json with specified indent spaces
            </summary>
            <param name="input"></param>
            <param name="spaces"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.RegisterCustomType(System.Type,EntityWorker.Core.Object.Library.JSON.Reflection.Serialize,EntityWorker.Core.Object.Library.JSON.Reflection.Deserialize)">
            <summary>
            Register custom type handlers for your own types not natively handled by fastJSON
            </summary>
            <param name="type"></param>
            <param name="serializer"></param>
            <param name="deserializer"></param>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.JSON.JSON.ClearReflectionCache">
            <summary>
            Clear the internal reflection cache so you can start from new (you will loose performance)
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Object.Library.JSON.JsonParser">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Object.Library.Migration">
            <inheritdoc />
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Migration.#ctor">
            <summary>
            Default cto
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.Migration.MigrationIdentifier">
            <summary>
             Make sure that the key dose not exist in the database
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Migration.ExecuteMigration(EntityWorker.Core.InterFace.IRepository)">
            <inheritdoc />
            <summary>
            Do your db Changes here
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:EntityWorker.Core.Object.Library.Modules.ModuleBuilder">
            <summary>
            Configrate you class here, add forgenKeys or Primary Keys so on.
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Repository.md
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.Modules.ModuleBuilder.DataBaseType">
            <summary>
            Providers type
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilder.Entity``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilder.EntityType(System.Type)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1">
            <summary>
            Entity Configration
            Here we could configrate and set all primary keys and Foreign keys for properties
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Repository.md
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.Property(System.String)">
            <summary>
            Add Rules to property
            </summary>
            <param name="name">propertyName</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Add Rules to property
            </summary>
            <typeparam name="P"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.HasJsonIgnore">
            <summary>
            EntityWorker will ignore serializing or derializing all properties that contain this attribute
            </summary>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.HasJsonDocument">
            <summary>
            Add JsonDocument for property
            </summary>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.HasXmlDocument">
            <summary>
            Add XmlDocument for property
            </summary>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.HasXmlIgnore">
            <summary>
            EntityWorker will ignore serializing or derializing all properties that contain this attribute
            </summary>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.HasKnownType(System.Type)">
            <summary>
            Use this when you have types that are unknown like interface wich it can takes more than one type 
            </summary>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.HasPrimaryKey(System.Boolean)">
            <summary>
            Add Primary Key to Property
            </summary>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <param name="autoGenerate"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.HasForeignKey``1(System.String)">
            <summary>
            Add Foreign Key to Property
            </summary>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <param name="Source"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.HasColumnType(System.String,System.Nullable{EntityWorker.Core.Helper.DataBaseTypes})">
            <summary>
            Assign a diffrent database type fot the property
            Attibutes Stringify, DataEncode and ToBase64String will override this attribute. 
            </summary>
            <param name="dataType">The database type ex nvarchar(4000)</param>
            <param name="dataBaseTypes">null for all providers</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.HasDataEncode(System.String,EntityWorker.Core.Helper.DataCipherKeySize)">
            <summary>
            Add DataEncode for property
            </summary>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <param name="key"></param>
            <param name="keySize"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.HasIndependentData">
            <summary>
            Add IndependentData for property
            </summary>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.NotNullable">
            <summary>
            Add NotNullable for property
            </summary>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.HasPropertyName(System.String,System.String)">
            <summary>
            Add PropertyName for property
            </summary>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <param name="name"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.HasStringify">
            <summary>
            Add Stringify for property
            </summary>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.ExcludeFromAbstract">
            <summary>
            Add ExcludeFromAbstract for property
            </summary>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.HasDefaultOnEmpty(System.Object)">
            <summary>
            Add DefaultOnEmpty for property
            </summary>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <param name="value"> Fefault value when property is null</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ModuleBuilderProperty`1.HasToBase64String">
            <summary>
            Add ToBase64String for property
            </summary>
            <typeparam name="TP"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:EntityWorker.Core.Object.Library.Modules.ObjectMapps`1">
            <summary>
            Entity Configration
            Here we could configrate and set all primary keys and Foreign keys for properties
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Repository.md
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ObjectMapps`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Add Rules to property
            </summary>
            <typeparam name="P"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ObjectMapps`1.TableName(System.String,System.String)">
            <summary>
            Assign diffrent name for the object in the database
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.ObjectMapps`1.HasRule``1">
            <summary>
            Assign a rule to object
            </summary>
            <typeparam name="Source">Must implement interface IDbRuleTrigger</typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.TypeMapps.Property(System.String)">
            <summary>
            Add Rules to property
            </summary>
            <param name="name">propertyName</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.TypeMapps.TableName(System.String,System.String)">
            <summary>
            Assign diffrent name for the object in the database
            </summary>
            <param name="name"></param>
            <param name="schema">eg. dbo</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.Modules.TypeMapps.HasRule(System.Type)">
            <summary>
            Assign a rule to object
            </summary>
            <typeparam name="ruleType">Must implement interface IDbRuleTrigger</typeparam>
            <returns></returns>
        </member>
        <member name="T:EntityWorker.Core.Object.Library.PackageEntity">
            <summary>
            EntityWorker.Core Package handler
            create a file that can be executed by entityworker.core only.
            this is so you could transfer files and data from one locaion to another location or you could create a backup file 
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Package.md
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.PackageEntity.Data">
            <summary>
            Included items in package
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Object.Library.SqlQueryable`1">
            <summary>
            quaryProvider for EntityWorker.Core
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.SqlQueryable`1.Executed">
            <summary>
            The Expression has already been executed, calling execute will only return the current list and no db call will be done.
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.SqlQueryable`1.PartExecuted">
            <summary>
            The Expression has already been executed, but you could still load children.
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.SqlQueryable`1.Provider">
            <summary>
            Current Provider
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.SqlQueryable`1.ParsedLinqToSql">
            <summary>
            Result of LightDataTable LinqToSql
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.SqlQueryable`1.ElementType">
            <summary>
            The generic type of ISqlQueryable
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Object.Library.SqlQueryable`1.Expression">
            <summary>
            Expression, NotImplemented
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.Add(`0)">
            <summary>
            Add Item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.AddRange(System.Collections.Generic.List{`0})">
            <summary>
            Add Items
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.IgnoreChildren(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Ignore loading some children eg ignore Person
            IgnoreChildren(x=> x.User.Person)
            </summary>
            <param name="ignoreActions"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.LoadChildren(System.Boolean)">
            <summary>
            LoadChildren, will load all children herarkie if onlyFirstLevel is not true
            </summary>
            <param name="onlyFirstLevel"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.LoadChildren(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            LoadChildren, will load all selected children herarkie eg
            LoadChildren(x=> x.User, x=> x.Adress.Select(a=> a.Country)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.Where(System.Linq.Expressions.Expression{System.Predicate{`0}})">
            <summary>
            Search 
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.Where(System.String)">
            <summary>
            expression of type string, the expression have to be the same type as T
            </summary>
            <Entityworker.linq>https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Dynamic.Linq.md</Entityworker.linq>
            <DynamicLing>https://github.com/kahanu/System.Linq.Dynamic</DynamicLing>
            <param name="expression"> eg "x.UserName.EndWith("test") And x.Name.Containe("test")"</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.Take(System.Int32)">
            <summary>
            Take only the selected rows 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.Skip(System.Int32)">
            <summary>
            Skip rows
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Order By Column
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.OrderBy(System.String)">
            <summary>
            Order By Column
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.OrderByDescending(System.String)">
            <summary>
            OrderByDescending Column
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            OrderByDescending Column
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.ExecuteAsync">
            <summary>
            Execute the search Command
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.Execute">
            <summary>
            Execute the search Command
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.ExecuteFirstOrDefault">
            <summary>
            Get Only the top 1
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.ExecuteCount">
            <summary>
            Return the count of the executed quary
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.ExecuteAny">
            <summary>
            Return the Any of the executed quary
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.Save(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Save All Changes. 
            You have to trigger SaveChanges() to commit
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.SaveAll(System.Func{`0,System.Boolean})">
            <summary>
            Save All Changes. 
            You have to trigger SaveChanges() to commit
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.Remove">
            <summary>
            Remove All objects herarkie. 
            You have to trigger SaveChanges() to commit
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.RemoveAll(System.Func{`0,System.Boolean})">
            <summary>
            Remove All objects herarkie. 
            You have to trigger SaveChanges() to commit
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.SaveChanges">
            <summary>
            Commit Changes
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.ToTable">
            <summary>
            Convert to LightDataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.ExecuteAndConvertToType``1">
            <summary>
            Convert Object of type a to b 
            all properties of B have to be mapped using attribute PropertyName or the propertName of A = B eg a."UserId" = b."UserId" 
            </summary>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.Dispose">
            <summary>
            Dispose the repository
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.Json(EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Convert To JSON
            </summary>
            <param name="param">The Default is GlobalConfigration.JSONParameters</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.JsonAsync(EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Convert To JSON
            </summary>
            <param name="param">The Default is GlobalConfigration.JSONParameters</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.Xml">
            <summary>
            Convert To XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.SqlQueryable`1.XmlAsync">
            <summary>
            Convert To XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.XML.XmlUtility.ToXml(System.Object)">
            <summary>
            serialize object to xml
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.XML.XmlUtility.FromXml(System.String,EntityWorker.Core.InterFace.IRepository)">
            <summary>
            DeSerilize Xml to object, this is supposed to handle all unknow object types but there has not been to many tests.
            </summary>
            <param name="xml"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Object.Library.XML.XmlUtility.FromXml``1(System.String,EntityWorker.Core.InterFace.IRepository)">
            <summary>
            DeSerilize Xml to object, this is supposed to handle all unknow object types but there has not been to many tests.
            </summary>
            <param name="xml"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.PrimaryKeyIndex.ClearAndRenderValues(System.Collections.Generic.List{EntityWorker.Core.LightDataTableRow},System.String)">
            <summary>
            For faster search we index all values for primaryKey.
            </summary>
            <param name="rows"></param>
            <param name="key"></param>
        </member>
        <member name="T:EntityWorker.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:EntityWorker.Core.Properties.Resources.DataTypes" -->
        <member name="P:EntityWorker.Core.Properties.Resources.Keywords">
            <summary>
              Looks up a localized string similar to ABORT,ACTION,ADD,AFTER,ALL,ALTER,ANALYZE,AND,AS,ASC,ATTACH,AUTOINCREMENT,BEFORE,BEGIN,BETWEEN,BY,CASCADE,CASE,CAST,CHECK,COLLATE,COLUMN,COMMIT,CONFLICT,CONSTRAINT,CREATE,CROSS,CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,DATABASE,DEFAULT,DEFERRABLE,DEFERRED,DELETE,DESC,DETACH,DISTINCT,DROP,EACH,ELSE,END,ESCAPE,EXCEPT,EXCLUSIVE,EXISTS,EXPLAIN,FAIL,FOR,FOREIGN,FROM,FULL,GLOB,GROUP,HAVING,IF,IGNORE,IMMEDIATE,IN,INDEX,INDEXED,INITIALLY,INNER,INSERT,INSTEAD,INTERSECT,INTO,IS,ISNULL,JOIN,KEY,LEFT,LIKE,LIMIT,MATCH, [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:EntityWorker.Core.Properties.Resources.MetaDataCollections" -->
        <!-- Badly formed XML comment ignored for member "P:EntityWorker.Core.Properties.Resources.MsSqlDataTypes" -->
        <member name="P:EntityWorker.Core.Properties.Resources.SQLite_Interop_64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Properties.Resources.SQLite_Interop_86">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:EntityWorker.Core.SqlQuerys.Evaluator">
            <summary>
            Rewrites an expression tree so that locally isolatable sub-expressions are evaluated and converted into ConstantExpression nodes.
            </summary>
        </member>
        <member name="M:EntityWorker.Core.SqlQuerys.Evaluator.Eval(System.Linq.Expressions.Expression)">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:EntityWorker.Core.SqlQuerys.Evaluator.Eval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <param name="fnCanBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="T:EntityWorker.Core.SqlQuerys.Evaluator.SubtreeEvaluator">
            <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
        </member>
        <member name="T:EntityWorker.Core.SqlQuerys.Evaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="M:EntityWorker.Core.SqlQuerys.LinqToSql.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:EntityWorker.Core.SqlQuerys.TypeHelper">
            <summary>
            Type related helper methods
            </summary>
        </member>
        <member name="T:EntityWorker.Core.Transaction.Transaction">
            <summary>
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Repository.md
            EntityWorker.Core Repository
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Transaction.Transaction.DataBaseTypes">
            <summary>
            DataBase Type
            </summary>
        </member>
        <member name="P:EntityWorker.Core.Transaction.Transaction.SqlConnection">
            <summary>
            DataBase Connection
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.#ctor(System.String,EntityWorker.Core.Helper.DataBaseTypes)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString">Full connection string</param>
            <param name="dataBaseTypes">The type of the database Ms-sql, Sql-light or PostgreSql
            Not the nuget package specific for the enum needs to be installed.
            Mssql for "System.Data.SqlClient"
            Sqllight for "System.Data.SQLite"
            PostgreSql for "Npgsql"
            </param>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.OnModuleStart">
            <summary>
            Start once the Transaction first initialized and its threadsafe
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.OnModuleConfiguration(EntityWorker.Core.Interface.IModuleBuilder)">
            <summary>
            Configrate your modules here, add Primary keys , ForeignKey and so on here.
            </summary>
            <param name="moduleBuilder"></param>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.InitializeMigration(System.Reflection.Assembly)">
            <summary>
            Initialize the migration
            </summary>
            <param name="assembly">null for the current Assembly</param>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.GetCodeLatestChanges(System.Reflection.Assembly)">
            <summary>
            Return the new added column, tables or modified Properties
            Property Rename is not supported. renaming a property x will end up removing the column x and adding column y so there will be dataloss
            Adding a primary key is not supported either
            Abstract classes are ignored by default
            </summary>
            <assembly> Null for the current executed Assembly </assembly>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.DataBaseExist">
            <summary>
            Validate if database exist 
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.CreateDataBase">
            <summary>
            Create DataBase if not exist
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.Clone``1(``0,FastDeepCloner.CloneLevel,FastDeepCloner.FieldType)">
            <summary>
            Clone Items
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <param name="level"></param>
            <param name="fieldType"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.MigrationConfig``1(``0)">
            <summary>
            Specifies the migrationConfig which contain a list Migration to migrate
            the migration is executed automatic(InitializeMigration()) as long as you have class that inherit from IMigrationConfig
            or you could manually execute a migration
            </summary>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.ValidateConnection">
            <summary>
            Validate Connection is Open or broken then reopen it
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.CreateTransaction">
            <summary>
            Create Transaction
            Only one Transaction will be created until it get disposed
            </summary>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.DataReaderConverter``1(EntityWorker.Core.Interface.ISqlCommand)">
            <summary>
            Convert to known object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.DataReaderConverter(EntityWorker.Core.Interface.ISqlCommand,System.Type)">
            <summary>
            Convert to unknown type
            </summary>
            <param name="command"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.ExecuteScalar(EntityWorker.Core.Interface.ISqlCommand)">
            <summary>
            
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.ExecuteNonQuery(EntityWorker.Core.Interface.ISqlCommand)">
            <inheritdoc />
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.Rollback">
            <summary>
            Rollback transaction
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.SaveChanges">
            <summary>
            commit the transaction
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.Dispose">
            <summary>
            Dispose the connection
            </summary>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.AddInnerParameter(EntityWorker.Core.Interface.ISqlCommand,System.String,System.Object,System.Nullable{System.Data.DbType})">
            <summary>
            Add parameters to SqlCommand
            </summary>
            <param name="cmd"></param>
            <param name="attrName"></param>
            <param name="value"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.GetSqlCommand(System.String)">
            <summary>
            Return SqlCommand that already contain SQLConnection
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.GetStoredProcedure(System.String)">
            <summary>
            Return SqlCommand that already contain SQLConnection
            </summary>
            <param name="storedProcedure">Name</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.GetLightDataTableList(EntityWorker.Core.Interface.ISqlCommand,System.String)">
            <summary>
            return a list of LightDataTable e.g. DataSet
            </summary>
            <param name="cmd">sqlCommand that are create from GetSqlCommand</param>
            <param name="primaryKeyId"> Table primaryKeyId, so LightDataTable.FindByPrimaryKey could be used </param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.Attach(System.Object,System.Boolean)">
            <summary>
            Attach object to WorkEntity to track changes
            </summary>
            <param name="objcDbEntity"></param>
            <param name="overwrite"></param>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.AttachNew(System.Object,System.Boolean)">
            <summary>
            Attach object to WorkEntity to track changes
            </summary>
            <param name="objcDbEntity"></param>
            <param name="overwrite"></param>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.GetObjectChanges(System.Object)">
            <summary>
            Get object changes from already attached objects
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.GetObjectChanges(System.Object,System.Object)">
            <summary>
            Get object changes
            </summary>
            <param name="entityA"></param>
            <param name="entityB"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.IsAttached(System.Object)">
            <summary>
            check if object is already attached
            </summary>
            <param name="entity"></param>
            <returns> primaryId >0 is mandatory </returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.IsAttached(System.String)">
            <summary>
            check if object is already attached
            </summary>
            <param name="entity"></param>
            <returns> primaryId >0 is mandatory </returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.GetLightDataTable(EntityWorker.Core.Interface.ISqlCommand,System.String)">
            <summary>
            return LightDataTable e.g. DataTable
            </summary>
            <param name="cmd">sqlCommand that are create from GetSqlCommand</param>
            <param name="primaryKey">Table primaryKeyId, so LightDataTable.FindByPrimaryKey could be used </param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.DeleteAsync(System.Object)">
            <summary>
            Remove Row
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.Delete(System.Object)">
            <summary>
            Remove Row
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.Save``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Save Entity 
            ignore/execlude updateing some properties to the database. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="ignoredProperties"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.SaveAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Save Entity 
            ignore/execlude updateing some properties to the database. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="ignoredProperties"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.GetAllAsync``1">
            <summary>
            Get All Rows
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.GetAll``1">
            <summary>
            Get All Rows
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.SelectAsync``1(System.String)">
            <summary>
            select by quarry
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.Select``1(System.String)">
            <summary>
            select by quarry
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.LoadChildrenAsync``1(``0,System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Load Object Children
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="onlyFirstLevel"></param>
            <param name="classes"></param>
            <param name="ignoreList"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.LoadChildren``1(``0,System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Load Object Children
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="onlyFirstLevel"></param>
            <param name="classes"></param>
            <param name="ignoreList"></param>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.LoadChildrenAsync``2(``0,System.Boolean,System.Collections.Generic.List{System.String},System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
            Load Object Children
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TP"></typeparam>
            <param name="item"></param>
            <param name="onlyFirstLevel"></param>
            <param name="ignoreList"></param>
            <param name="actions"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.LoadChildren``2(``0,System.Boolean,System.Collections.Generic.List{System.String},System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
            Load Object Children
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TP"></typeparam>
            <param name="item"></param>
            <param name="onlyFirstLevel"></param>
            <param name="ignoreList"></param>
            <param name="actions"></param>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.CreateTable``1(System.Boolean)">
            <summary>
            This will recreate the table and if it has a ForeignKey to other tables it will also recreate those table to
            use it wisely
            </summary>
            <typeparam name="T"></typeparam>
            <param name="force"> remove and recreate all</param>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.CreateTable(System.Type,System.Boolean)">
            <summary>
            This will recreate the table and if it has a ForeignKey to other tables it will also recreate those table to
            use it wisely
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="force"> remove and recreate all</param>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.RemoveTable``1">
            <summary>
            This will remove the table and if it has a ForeignKey to other tables it will also remove those table to
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.RemoveTable(System.Type)">
            <summary>
            This will remove the table and if it has a ForeignKey to other tables it will also remove those table to
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.Get``1">
            <summary>
            Generic Get Quary
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.FromJson``1(System.String,EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Get ISqlQueryable from Json.
            All JsonIgnore Values will be loaded from the database if a primary key exist and the value is default()  eg null or empty or even 0 for int and decimal
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param">The Default is GlobalConfigration.JSONParameters</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.FromJsonAsync``1(System.String,EntityWorker.Core.Object.Library.JSON.JSONParameters)">
            <summary>
            Get ISqlQueryable from Json.
            All JsonIgnore Values will be loaded from the database if a primary key exist
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param">The Default is GlobalConfigration.JSONParameters</param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.FromXml``1(System.String)">
            <summary>
            Get ISqlQueryable from Xml.
            All XmlIgnore Values will be loaded from the database if a primary key exist and the value is default()  eg null or empty or even 0 for int and decimal
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.FromXmlAsync``1(System.String)">
            <summary>
            Get ISqlQueryable from Xml.
            All XmlIgnore Values will be loaded from the database if a primary key exist and the value is default()  eg null or empty or even 0 for int and decimal
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Create IQueryable from Expression
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Create IQueryable from Expression
            NotImplementedException
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Execute Quary
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Execute generic quary
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.CreatePackage``1(``0)">
            <summary>
            Create Protected package that contain files or data for backup purpose or moving data from one location to another.
            Note that this package can only be readed by EntityWorker.Core
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Package.md
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:EntityWorker.Core.Transaction.Transaction.GetPackage``1(System.Byte[])">
            <summary>
            Read the package and get its content
            https://github.com/AlenToma/EntityWorker.Core/blob/master/Documentation/Package.md
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
    </members>
</doc>
